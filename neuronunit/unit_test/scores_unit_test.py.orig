#!/usr/bin/env python
# coding: utf-8

import unittest
import matplotlib
matplotlib.use('Agg')
<<<<<<< HEAD
=======

>>>>>>> bc9859eedf2195e6f81fc149cc5cc8c34009ac5b
from neuronunit.allenapi.allen_data_driven import opt_setup, opt_setup_two, opt_exec
from neuronunit.allenapi.allen_data_driven import opt_to_model,wrap_setups
from neuronunit.allenapi.utils import dask_map_function
from neuronunit.optimization.optimization_management import check_bin_vm_soma
from neuronunit.optimization.model_parameters import MODEL_PARAMS, BPO_PARAMS, to_bpo_param
from neuronunit.optimization.optimization_management import dtc_to_rheo,inject_and_plot_model
import numpy as np
from neuronunit.optimization.data_transport_container import DataTC
import efel
from jithub.models import model_classes
import matplotlib.pyplot as plt
import quantities as qt
import os
from sciunit.scores import RelativeDifferenceScore,ZScore
import copy



class testOptimization(unittest.TestCase):
    def setUp(self):
        self = self
        self.ids = [ 324257146,
                325479788,
                476053392,
                623893177,
                623960880,
                482493761,
                471819401
               ]
        self.specimen_id = self.ids[1]
    def optimize_job(self,model_type,score_type=ZScore):
        find_sweep_with_n_spikes = 8
        dtc = DataTC()
        dtc.backend = model_type
        model = dtc.dtc_to_model()
        model.params = BPO_PARAMS[model_type]
        fixed_current = 122 *qt.pA
        if model_type == "ADEXP":
            NGEN = 100
            MU = 20
        else:
            NGEN = 100
            MU = 100

        mapping_funct = dask_map_function
        cell_evaluator,simple_cell,suite,target_current,spk_count = wrap_setups(
                  self.specimen_id,
                  model_type,
                  find_sweep_with_n_spikes,
                  template_model=copy.copy(model),
                  fixed_current=False,
                  cached=False,
                  score_type=score_type
        )
        final_pop, hall_of_fame, logs, hist = opt_exec(MU,NGEN,mapping_funct,cell_evaluator)
        opt,target = opt_to_model(hall_of_fame,cell_evaluator,suite, target_current, spk_count)
        best_ind = hall_of_fame[0]
        fitnesses = cell_evaluator.evaluate_with_lists(best_ind)
        target.vm_soma = suite.traces['vm15']
        check_bin_vm_soma(target,opt)
        return np.sum(fitnesses)
    def test_opt_relative_diff(self):
        model_type = "ADEXP"
        sum_fit = self.optimize_job(model_type,score_type=RelativeDifferenceScore)
        assert sum_fit<9.0
    def test_opt_ZScore(self):
        model_type = "ADEXP"
        sum_fit = self.optimize_job(model_type,score_type=ZScore)
        assert sum_fit<0.7

    def test_opt_relative_diff_izhi(self):
        model_type = "IZHI"
        self.optimize_job(model_type,score_type=RelativeDifferenceScore)
        assert sum_fit<9.0

    def test_opt_ZScore_izhi(self):
        model_type = "IZHI"
        self.optimize_job(model_type,score_type=ZScore)
        assert sum_fit<0.7
